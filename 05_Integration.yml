---
- hosts: win
  gather_facts: false
  name: Integration Tasks
  vars:
    https: true
    validate_certs: false
  vars_files: 
    vars.yml
  tasks: 
  - name: Mount NFS labs datastore to ESXi
    vmware_host_datastore:
      hostname: '{{ esxi_address }}'
      username: '{{ esxi_username }}'
      password: '{{ lab_password }}'
      esxi_hostname: '{{ esxi_fqdn }}'
      validate_certs: no
      datastore_name: "{{ ontap_vol_labs }}"
      datastore_type: 'nfs'
      nfs_server: '{{ ontap_svm_address }}'
      nfs_path: "/{{ ontap_vol_labs }}"
      nfs_ro: no
      state: present
    delegate_to: localhost
  - name: Mount NFS install datastore to ESXi
    vmware_host_datastore:
      hostname: '{{ esxi_address }}'
      username: '{{ esxi_username }}'
      password: '{{ lab_password }}'
      esxi_hostname: '{{ esxi_fqdn }}'
      validate_certs: no
      datastore_name: "{{ ontap_vol_install }}"
      datastore_type: 'nfs'
      nfs_server: '{{ ontap_svm_address }}'
      nfs_path: "/{{ ontap_vol_install }}"
      nfs_ro: no
      state: present
    delegate_to: localhost
  - name: download git-client
    win_get_url:
      url: 'https://github.com/git-for-windows/git/releases/download/v2.21.0.windows.1/Git-2.21.0-64-bit.exe'
      dest: 'C:\Windows\Temp\Git-2.21.0-64-bit.exe'
  - name: install git-client
    raw: 'C:\Windows\Temp\Git-2.21.0-64-bit.exe /SILENT /COMPONENTS="icons,ext\reg\shellhere,assoc,assoc_sh"'
  - name: Clone the repository
    raw: 'git clone https://github.com/madlabber/vlab.git {{ portal_home_dir }}'
    ignore_errors: yes
  - name: git pull
    win_shell: 'git pull'
    args:  
      chdir: '{{ portal_home_dir }}'
    ignore_errors: yes
  - name: download node.js
    win_get_url:
      url: 'https://nodejs.org/dist/v10.15.3/node-v10.15.3-x64.msi'
      dest: 'C:\Windows\Temp\node-v10.15.3-x64.msi'
  - name: install node.js
    raw: 'msiexec /qn /l* C:\Windows\Temp\node-log.txt /i C:\Windows\Temp\node-v10.15.3-x64.msi'
  - name: Install nodemon
    win_shell: 'npm install nodemon -g'
    args:  
      chdir: '{{ portal_home_dir }}'
  - name: Install express
    win_shell: 'npm install express'
    args:  
      chdir: '{{ portal_home_dir }}'
  - name: download myrtille
    win_get_url:
      url: 'https://github.com/cedrozor/myrtille/releases/download/v2.3.1/Myrtille_2.3.1_x86_x64_Setup.exe'
      dest: 'C:\Windows\Temp\Myrtille_2.3.1_x86_x64_Setup.exe'
  - name: Extract Myrtille
    raw: 'C:\Windows\Temp\Myrtille_2.3.1_x86_x64_Setup.exe -y'
  - name: install Myrtille
    raw: 'msiexec /qb! /l* C:\Windows\Temp\myrtille-log.txt /i C:\Windows\Temp\myrtille.msi'  
  - name: Copy Settings file
    win_shell: 'copy {{ portal_home_dir }}\settings.cfg.sample {{ portal_home_dir }}\settings.cfg'
    args:  
      chdir: '{{ portal_home_dir }}'
      creates: '{{ portal_home_dir }}\settings.cfg'
  - name: Write Settings title
    win_shell: '{{ portal_home_dir }}\set-vlabsettings.ps1 "sitename" "{{ portal_sitename }}"'
    args:  
      chdir: '{{ portal_home_dir }}'
  - name: Reserve vCenter RAM
    vmware_guest:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ lab_password }}'
      validate_certs: no
      name: '{{ vcenter_hostname }}'
      state: present
      hardware:
        memory_reservation_lock: true
    delegate_to: localhost
  - name: Reserve DC RAM
    vmware_guest:
      hostname: '{{ vcenter_address }}'
      username: '{{ vcenter_username }}'
      password: '{{ lab_password }}'
      validate_certs: no
      name: '{{ dc_hostname }}'
      state: present
      hardware:
        memory_reservation_lock: true
    delegate_to: localhost
- hosts: esx
  vars_files: 
    vars.yml
  tasks:
  - name: Enable Autostart
    shell: vim-cmd hostsvc/autostartmanager/enable_autostart true
    register: autostartmanager
    changed_when: false
    ignore_errors: yes
  - name: Update Autostart defaults
    shell: vim-cmd hostsvc/autostartmanager/update_defaults "120" "120" "guestShutdown" "yes"
    register: autostartmanager
    changed_when: false
    ignore_errors: yes
  - name: Set Autostart order for ONTAP Select
    shell: 'vim-cmd hostsvc/autostartmanager/update_autostartentry $(vim-cmd vmsvc/getallvms | grep {{ ontap_hostname }} | cut -d" " -f1) "powerOn" "120" "1" "guestShutdown" "120" "yes"'
    register: autostartmanager
    changed_when: false
    ignore_errors: yes
  - name: Set Autostart order for DC
    shell: 'vim-cmd hostsvc/autostartmanager/update_autostartentry $(vim-cmd vmsvc/getallvms | grep {{ dc_hostname }} | cut -d" " -f1) "powerOn" "120" "2" "guestShutdown" "120" "yes"'
    register: autostartmanager
    changed_when: false
    ignore_errors: yes
  - name: Set Autostart order for vCenter
    shell: 'vim-cmd hostsvc/autostartmanager/update_autostartentry $(vim-cmd vmsvc/getallvms | grep {{ vcenter_hostname }} | cut -d" " -f1) "powerOn" "120" "3" "guestShutdown" "120" "yes"'
    register: autostartmanager
    changed_when: false
    ignore_errors: yes



